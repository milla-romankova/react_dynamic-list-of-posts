{"version":3,"sources":["api/api.js","api/users.js","components/UserSelect/UserSelect.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostComments/PostComments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUsers","users","UserSelect","selectedUserId","selectUser","useState","setUsers","useEffect","loadUsers","usersFromServer","slice","className","value","onChange","map","user","index","key","id","name","getUserPosts","userId","posts","filter","post","getPostDetails","postId","details","Loader","PostsList","selectedPostId","selectPost","setPosts","isLoading","setIsLoading","loadPosts","postsFromServer","title","type","onClick","getPostComments","comments","postComments","comment","addComment","email","body","method","headers","JSON","stringify","removeComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","handleSubmit","event","preventDefault","includes","handleChange","target","onSubmit","placeholder","PostComments","handleClick","PostDetails","setDetails","setComments","isVisible","setIsVisible","loadDetails","loadedDetails","length","App","setSelectedUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d78ea85b.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(url, options) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, selectUser }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async() => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer.slice(0, 10));\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={selectUser}\n      >\n        <option value=\"0\">All users</option>\n        {users.map((user, index) => (\n          <option\n            key={user.id}\n            value={index + 1}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const details = await request(`/posts/${postId}`);\n\n  return details;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, selectedPostId, selectPost }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  const loadPosts = async() => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n    setPosts(postsFromServer);\n    setIsLoading(false);\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul>\n        {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User #${post.userId}]:`}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => selectPost(post.id)}\n                >\n                  {selectedPostId === post.id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n        </ul>\n      )}\n    </div>\n  )\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n  const postComments = comments.filter(comment => comment.postId === postId);\n\n  return postComments;\n};\n\nexport const addComment = async(postId, name, email, body) => post(\n  '/comments', {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    await addComment(selectedPostId, name, email, body);\n    updateComments();\n    setBody('');\n  };\n\n  const handleChange = (event) => {\n    const {name, value} = event.target;\n\n    switch(name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"email\":\n        setEmail(value);\n        break;\n      case \"body\":\n        setBody(value);\n        break;\n    }\n  }\n\n  return(\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeComment } from '../../api/comments';\n\nexport const PostComments = ({ comments, updateComments }) => {\n  const handleClick = async(commentId) => {\n    await removeComment(commentId);\n    updateComments();\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          className=\"PostDetails__list-item\"\n          key={comment.id}\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleClick(comment.id)}\n          >\n            X\n          </button>\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostComments.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComments } from '../PostComments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ( { selectedPostId }) => {\n  const [details, setDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    loadDetails();\n    updateComments();\n  }, [selectedPostId]);\n\n  const loadDetails = async() => {\n    const loadedDetails = await getPostDetails(selectedPostId);\n    setDetails(loadedDetails);\n    setIsVisible(false);\n  };\n\n  const updateComments = async() => {\n    const postComments = await getPostComments(selectedPostId);\n    setComments(postComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{details.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsVisible(!isVisible)}\n            >\n              {isVisible ? 'Hide comments' : 'Show comments'}\n            </button>\n          ) : (\n            <h4>No Comments</h4>\n        )}\n\n        {isVisible &&\n          <PostComments\n            comments={comments}\n            updateComments={updateComments}\n          />\n        }\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            updateComments={updateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { UserSelect } from './components/UserSelect';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = useCallback((event) => {\n    setSelectedUserId(+event.target.value);\n  }, []);\n\n  const selectPost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n        {selectedPostId ? (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          ) : (\n            <h4>Open a post to see details</h4>\n          )}\n\n        </div>\n      </main>\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}